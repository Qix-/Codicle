/**
 * CLI Parser for Codicle
 */

start
	= (WS+)? command:fragment arguments:argumentFragment* (WS+)?
	{
		return {
			command: command,
			args: arguments
		};
	}
	;

WS "whitespace"
	= ' '
	;

E "escape character"
	= '\\'
	;

hex "hex character"
	= [0-9A-F]i
	;

escape "escape"
	= (E '\'') { return '\''; }
	/ (E '\"') { return '\"'; }
	/ (E '\\') { return '\\'; }
	/ (E 'b') { return '\b'; }
	/ (E 'f') { return '\f'; }
	/ (E 'n') { return '\n'; }
	/ (E 'r') { return '\r'; }
	/ (E 't') { return '\t'; }
	/ (E 'o'i? octals:([0-9] [0-9] [0-9])) { return String.fromCharCode(parseInt(octals.join(''), 8)); }
	/ (E 'x'i hexes:(hex hex)) { return String.fromCharCode(parseInt(hexes.join(''), 16)); }
	/ (E 'u'i hexes:(hex hex hex hex)) { return String.fromCharCode(parseInt(hexes.join(''), 16)); }
	;

visible "non-spacing character"
	= !WS chr:. { return chr; }
	;

ident "identifier character"
	= (!'=' chr:visible) { return chr; }

string "string"
	= '"' str:(('\\\\' / escape / ('\\"') / [^"])+) '"' { return str.join(''); }
	;

name "name"
	= chrs:ident+ { return chrs.join(''); }
	;

fragment "fragment"
	= string
	/ name
	;

argument "argument"
	= pair:pair
	/ frag:fragment
	{
		return typeof pair != 'undefined' ? pair : { key: frag };
	}
	;

argumentFragment "argument fragment"
	= (WS+ arg:argument) { return arg; }
	;

pair "argument pair"
	= arg:name value:pairVal { return {key: arg, val: value}; }
	;

pairVal "argument pair value"
	= '=' value:fragment { return value; }
	;